@model Notadise.Models.PomodoroViewModel

@{
    ViewData["Title"] = "Pomodoro";
    Layout = "~/Views/Shared/_Layout.cshtml"; // Use the shared layout
}

<head>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
</head>

<div class="pomodoro-container">
    <div class="timer-box">
        <div>
            <button onclick="setMode('Pomodoro', 30)" class="mode-btn">Pomodoro</button>
            <button onclick="setMode('Short Break', 10)" class="mode-btn">Short Break</button>
            <button onclick="setMode('Long Break', 20)" class="mode-btn">Long Break</button>
        </div>
        <br />
        <br />
        <h1 id="mode">Pomodoro</h1>
        <div id="timer">30:00</div>
        <br />
        <div class="timer-buttons">
            <button id="startPauseBtn" class="start">Start</button>
            <button id="resetBtn" class="reset">Reset</button>
        </div>
        <br />
        <br />
        
        <br />
    </div>
</div>

<script>
    let timerInterval;
    let isRunning = false;
    let currentTime = 30 * 60; // Default to 30 minutes

    function updateTimerDisplay() {
        const minutes = Math.floor(currentTime / 60).toString().padStart(2, '0');
        const seconds = (currentTime % 60).toString().padStart(2, '0');
        document.getElementById("timer").innerText = `${minutes}:${seconds}`;
    }

    function startPauseTimer() {
        const btn = document.getElementById("startPauseBtn");

        if (isRunning) {
            clearInterval(timerInterval);
            btn.innerText = "Start";
            btn.className = "start";
        } else {
            timerInterval = setInterval(() => {
                if (currentTime > 0) {
                    currentTime--;
                    updateTimerDisplay();
                } else {
                    clearInterval(timerInterval);
                    alert("Time's up!");
                }
            }, 1000);

            btn.innerText = "Pause";
            btn.className = "pause";
        }

        isRunning = !isRunning;
    }

    function resetTimer() {
        clearInterval(timerInterval);
        isRunning = false;
        document.getElementById("startPauseBtn").innerText = "Start";
        document.getElementById("startPauseBtn").className = "start";
        updateTimerDisplay();
    }

    function setMode(mode, minutes) {
        document.getElementById("mode").innerText = mode;
        currentTime = minutes * 60;
        updateTimerDisplay();
        resetTimer();
    }

    // Attach event listeners
    document.getElementById("startPauseBtn").addEventListener("click", startPauseTimer);
    document.getElementById("resetBtn").addEventListener("click", resetTimer);

    // Initialize display
    updateTimerDisplay();
</script>


<style>

    html, body {
    }


    .pomodoro-container {
        height: 100vh;
        display: flex;
        justify-content: center;
        align-items: center;
        background-image: url('@Model.BackgroundImage');
        background-size: cover;
        background-position: center;
        color: white;
        text-align: center;
    }

    .timer-box {
        padding: 20px;
        border-radius: 10px;
    }

        .timer-box h1 {
            font-size: 3rem;
            margin-bottom: 10px;
        }

    .timer-buttons button {
        margin: 5px;
        padding: 10px 20px;
        font-size: 1.2rem;
        border: solid;
        border-color: white;
        border-radius: 30px;
        cursor: pointer;
        color: white;
    }

    .start {
        background-color: #8A64AD;
        margin: 5px;
        padding: 10px 20px;
        font-size: 1.2rem;
        border: solid;
        border-color: white;
        border-radius: 30px;
        cursor: pointer;
        color: white;
        opacity: 80%;
    }

    .pause {
        background-color: #8A64AD;
        padding: 10px 20px;
        font-size: 1.2rem;
        border: solid;
        border-color: white;
        border-radius: 30px;
        cursor: pointer;
        color: white;
        opacity: 70%;
    }

    .reset {
        background-color: #6b4c8e;
        margin: 5px;
        padding: 10px 20px;
        font-size: 1.2rem;
        border: solid;
        border-color: white;
        border-radius: 30px;
        cursor: pointer;
        color: white;
        opacity: 70%;
    }

    .mode-btn {
        background-color: rgba(255,255,255,0.1);
        margin: 5px;
        padding: 10px 20px;
        font-size: 1.2rem;
        border: solid;
        border-color: white;
        border-radius: 30px;
        cursor: pointer;
        color: white;
    }
</style>