@{
    ViewData["Title"] = "New Note";
}

<div class="new-note-container">
    <!-- Header -->
    <div class="note-header">
        <input type="text" id="noteHeader" placeholder="HEADER" class="note-header-input" />
    </div>

    <!-- Custom Category Dropdown -->
    <div class="note-category">
        <label for="noteCategory">Category:</label>
        <div class="custom-select">
            <select id="noteCategory" class="note-category-select">
                <!-- Default categories will be populated dynamically -->
            </select>
        </div>
        <br />
        <br />
       
        <!-- Button to add a new category -->
        <button id="addCategoryBtn" class="add-category-btn">+ Add Category</button>
    </div>
    <br />

    <!-- Input field to add new category (hidden initially) -->
    <div class="new-category-input" style="display: none;">
        <input type="text" id="newCategoryName" class="new-category-name" placeholder="Enter new category name" />
        <button id="saveNewCategoryBtn" class="save-new-category-btn">Save</button>
    </div>
    <br />
    <br />

    <!-- Note Sections -->
    <div class="note-sections" id="noteSections"></div>

    <!-- Add Section Button -->
    <button id="addSectionBtn" class="add-section-btn">+</button>

    <!-- Save Button -->
    <button id="saveNoteBtn" class="save-note-btn">Save</button>

    <div id="savePrompt" class="modal">
    <div class="modal-content">
        <h3>Success!</h3>
        <p>Your note has been saved successfully.</p>
        <button id="closeSavePrompt" class="close-btn">Close</button>
    </div>
</div>


</div>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", () => {
            // Initialize categories, notes, and draft
            loadCategories();
            setupAutoSave();

            const editNoteIndex = localStorage.getItem("editNoteIndex");
            if (editNoteIndex !== null) {
                loadNoteForEditing(editNoteIndex);
                localStorage.removeItem("editNoteIndex"); // Clear edit index for next use
            } else {
                restoreDraft();
            }
        });

        let sectionCount = 1;

        // Utility: Collect note data from the form
        function collectNoteData() {
            const header = document.getElementById("noteHeader").value.trim();
            const category = document.getElementById("noteCategory").value;
            const sections = Array.from(document.querySelectorAll(".note-section")).map((section) => ({
                title: section.querySelector(".section-title").value.trim(),
                text: section.querySelector(".section-text").value.trim(),
            }));
            return { header, category, sections };
        }

        // Save or Update Note
        document.getElementById("saveNoteBtn").addEventListener("click", () => {
            const notes = JSON.parse(localStorage.getItem("savedNotes")) || [];
            const noteData = collectNoteData();

            if (!noteData.header || !noteData.sections.length) {
                alert("Please fill in all required fields!");
                return;
            }

            const editNoteIndex = localStorage.getItem("editNoteIndex");
            if (editNoteIndex !== null) {
                notes[editNoteIndex] = noteData; // Update existing note
            } else {
                notes.push(noteData); // Add new note
            }

            localStorage.setItem("savedNotes", JSON.stringify(notes));
            localStorage.removeItem("noteDraft"); // Clear the draft after saving
            showSavePrompt();
        });

        // Load Categories
        function loadCategories() {
            const categories = JSON.parse(localStorage.getItem("categories")) || ["School", "University", "Work", "Art Projects"];
            populateCategoriesDropdown(categories);
        }

        // Populate Dropdown
        function populateCategoriesDropdown(categories) {
            const categoryDropdown = document.getElementById("noteCategory");
            categoryDropdown.innerHTML = `<option value="" disabled selected>Select a Category</option>`;
            categories.forEach((category) => {
                const option = document.createElement("option");
                option.value = category;
                option.textContent = category;
                categoryDropdown.appendChild(option);
            });
        }

        // Add New Category
        document.getElementById("addCategoryBtn").addEventListener("click", () => {
            document.querySelector(".new-category-input").style.display = "block";
        });

        document.getElementById("saveNewCategoryBtn").addEventListener("click", () => {
            const newCategory = document.getElementById("newCategoryName").value.trim();
            if (!newCategory) {
                alert("Category name cannot be empty!");
                return;
            }

            const categories = JSON.parse(localStorage.getItem("categories")) || [];
            if (categories.includes(newCategory)) {
                alert("Category already exists!");
                return;
            }

            categories.push(newCategory);
            localStorage.setItem("categories", JSON.stringify(categories));
            loadCategories();
            document.getElementById("newCategoryName").value = "";
            document.querySelector(".new-category-input").style.display = "none";
        });

        // Add New Section
        document.getElementById("addSectionBtn").addEventListener("click", () => {
            sectionCount++;
            const newSection = createSection(sectionCount);
            document.getElementById("noteSections").appendChild(newSection);
            saveDraft(); // Save draft after adding
        });

        // Create Section
        function createSection(number, title = "", text = "") {
            const sectionDiv = document.createElement("div");
            sectionDiv.classList.add("note-section");
            sectionDiv.innerHTML = `
                <input type="text" class="section-title" placeholder="Point ${number}" value="${title}" />
                <textarea class="section-text" placeholder="Write your text here...">${text}</textarea>
                <button class="remove-section-btn" onclick="removeSection(this)">Remove</button>
            `;
            return sectionDiv;
        }

        // Remove Section
        function removeSection(button) {
            button.closest(".note-section").remove();
            saveDraft(); // Save draft after removing
        }

        // Auto-Save Setup
        function setupAutoSave() {
            document.querySelectorAll("#noteHeader, #noteCategory").forEach((element) => {
                element.addEventListener("input", saveDraft);
            });

            document.getElementById("noteSections").addEventListener("input", saveDraft);
        }

        // Save Draft
        function saveDraft() {
            const noteData = collectNoteData();
            localStorage.setItem("noteDraft", JSON.stringify(noteData));
        }

        // Restore Draft
        function restoreDraft() {
            const draft = JSON.parse(localStorage.getItem("noteDraft"));
            if (draft) {
                populateNoteData(draft);
            } else {
                addDefaultSection();
            }
        }

        // Populate Note Data
        function populateNoteData(noteData) {
            document.getElementById("noteHeader").value = noteData.header || "";
            document.getElementById("noteCategory").value = noteData.category || "";
            const noteSections = document.getElementById("noteSections");
            noteSections.innerHTML = ""; // Clear existing sections
            noteData.sections.forEach((section, index) => {
                noteSections.appendChild(createSection(index + 1, section.title, section.text));
            });
        }

        // Load Note for Editing
        function loadNoteForEditing(index) {
            const notes = JSON.parse(localStorage.getItem("savedNotes")) || [];
            const noteToEdit = notes[index];
            if (noteToEdit) {
                populateNoteData(noteToEdit);
            } else {
                console.warn("No note found for editing.");
            }
        }

        // Add Default Section on Page Load
        function addDefaultSection() {
            const noteSections = document.getElementById("noteSections");
            noteSections.appendChild(createSection(1));
        }

        // Show Save Confirmation
        function showSavePrompt() {
            const savePrompt = document.getElementById("savePrompt");
            savePrompt.classList.add("show");
            setTimeout(() => {
                savePrompt.classList.remove("show");
                window.location.href = "/Notes/MyNotes";
            }, 2000);
        }

        function saveNote() {
            const header = document.getElementById("noteHeader").value.trim();
            const category = document.getElementById("noteCategory").value.trim();
            const sections = Array.from(document.querySelectorAll(".note-section")).map(section => ({
                title: section.querySelector(".section-title").value.trim(),
                text: section.querySelector(".section-text").value.trim(),
            }));

            if (!header || !category || sections.length === 0) {
                alert("Please fill in all required fields!");
                return;
            }

            const content = sections.map(section => `${section.title}: ${section.text}`).join("\n\n");

            const newNote = {
                title: header,
                content: content,
                category: category,
                lastEdited: new Date().toISOString(), // Add the last edited timestamp
            };

            fetch("/Notes/SaveNote", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(newNote),
            })
                .then(response => {
                    if (response.ok) {
                        console.log("Note saved successfully!");
                        window.location.href = "/"; // Redirect to home page after saving
                    } else {
                        console.error("Failed to save the note.");
                        alert("There was an issue saving your note. Please try again.");
                    }
                })
                .catch(error => {
                    console.error("Error saving the note:", error);
                    alert("There was an error saving your note. Please try again.");
                });
        }



    </script>
}

<style>

    .custom-dropdown {
        position: relative;
        display: inline-block;
    }

    .dropdown-toggle {
        background-color: #8A64AD;
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

    .dropdown-menu {
        display: none;
        position: absolute;
        background-color: white;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        list-style-type: none;
        padding: 0;
        margin: 0;
        border-radius: 5px;
        z-index: 1000;
    }

    .dropdown-item {
        padding: 10px;
        color: white;
        cursor: pointer;
        border-bottom: 1px solid #f0f0f0;
    }

        .dropdown-item:last-child {
            border-bottom: none;
        }

        .dropdown-item:hover {
            opacity: 0.8;
        }

    .custom-dropdown:hover .dropdown-menu {
        display: block;
    }
    .new-note-container {
        padding: 20px;
        max-width: 600px;
        margin: 0 auto;
    }

    .note-header-input {
        width: 100%;
        padding: 10px;
        font-size: 1.5rem;
        color: #8A64AD;
        border: none;
        border-bottom: 2px solid #8A64AD;
        outline: none;
        text-align: center;
    }

    .note-header-input::placeholder {
        color: #8A64AD;
        opacity: 0.6;
    }

    .note-category {
        margin-top: 20px;
    }


    .custom-select {
        position: relative;
        display: inline-block;
        width: 100%;
        background-color: #f5f5f5;
        border-radius: 5px;
        border: 1px solid #ddd;
    }

    .note-category-select {
        width: 100%;
        padding: 8px 15px;
        font-size: 1rem;
        border: none;
        border-radius: 5px;
        outline: none;
        background-color: #fff;
        color: #8A64AD;
        appearance: none;
        cursor: pointer;
    }

    .note-category-select::-ms-expand {
        display: none;
    }

    .note-category-select:focus {
        border-color: #8A64AD;
        box-shadow: 0 0 5px rgba(138, 100, 173, 0.5);
    }

    .note-category-select option {
        color: #333;
    }

    .add-category-btn {
        display: inline-block;
        margin-top: 10px;
        padding: 5px 10px;
        background-color: #8A64AD;
        color: white;
        font-size: 1rem;
        cursor: pointer;
        border: none;
        border-radius: 5px;
    }

    .add-section-btn {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 60px;
        height: 60px;
        background-color: #8A64AD;
        border: none;
        border-radius: 50%;
        color: white;
        font-size: 65px;
        cursor: pointer;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);
        transition: transform 0.2s ease;
        position: fixed;
        bottom: 20px;
        right: 20px;
    }

    .add-section-btn:hover {
        transform: scale(1.1);
        background-color: #764DA9;
    }

    .add-section-btn:active {
        transform: scale(0.95);
    }

    .add-section-btn i {
        pointer-events: none;
    }

    .new-category-input {
        margin-top: 10px;
    }

    .new-category-name {
        width: 100%;
        padding: 8px;
        font-size: 1rem;
        border: 1px solid #ddd;
        border-radius: 5px;
        outline: none;
    }

    .save-new-category-btn {
        display: inline-block;
        margin-top: 10px;
        padding: 5px 10px;
        background-color: #8A64AD;
        color: white;
        font-size: 1rem;
        cursor: pointer;
        border: none;
        border-radius: 5px;
    }

    .save-new-category-btn:hover {
        background-color: #764DA9;
    }

    .save-note-btn {
        display: block;
        margin: 20px auto;
        padding: 10px 20px;
        background-color: #8A64AD;
        color: white;
        border: none;
        border-radius: 5px;
        font-size: 1rem;
        cursor: pointer;
        transition: background-color 0.2s ease;
    }

    .save-note-btn:hover {
        background-color: #764DA9;
    }

    .modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.6);
    justify-content: center;
    align-items: center;
    z-index: 1000;
}

    .modal.show {
        display: flex;
    }

    .modal-content {
        background: #fff;
        padding: 20px;
        border-radius: 10px;
        text-align: center;
        width: 80%;
        max-width: 400px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
    }

    .modal-content h3 {
        margin-top: 0;
            color: #8A64AD;
    }

    .modal-content p {
        margin: 10px 0;
        font-size: 16px;
    }

    .close-btn {
        background-color: #8A64AD;
        color: white;
        border: none;
        border-radius: 5px;
        padding: 10px 20px;
        cursor: pointer;
        font-size: 16px;
        margin-top: 10px;
        transition: background-color 0.3s;
    }

    .close-btn:hover {
            background-color: #8A64AD;
    }

    .section-title {
        font-size: 16px;
        font-weight: bold;
        padding: 10px;
        border: 2px solid #dcdcdc;
        border-radius: 5px;
        outline: none;
        color: #8A64AD;
        background-color: #f9f9f9;
        transition: border-color 0.3s ease;
    }

        .section-title:focus {
            border-color: #764DA9;
            background-color: #ffffff;
        }

    .remove-section-btn {
        align-self: flex-end;
        font-size: 14px;
        font-weight: bold;
        color: #ffffff;
        background-color: #8A64AD;
        border: none;
        border-radius: 5px;
        padding: 10px 15px;
        cursor: pointer;
        transition: background-color 0.3s ease, transform 0.2s ease;
    }

        .remove-section-btn:hover {
            background-color: #764DA9;
            transform: scale(1.05);
</style>
