@{
    ViewData["Title"] = "New Note";
}

<div class="new-note-container">
    <!-- Header -->
    <div class="note-header">
        <input type="text" id="noteHeader" placeholder="HEADER" class="note-header-input" />
    </div>

    <!-- Custom Category Dropdown -->
    <div class="note-category">
        <label for="noteCategory">Category:</label>
        <div class="custom-select">
            <select id="noteCategory" class="note-category-select">
                <!-- Default categories will be populated dynamically -->
            </select>
        </div>
        <br />
        <br />
       
        <!-- Button to add a new category -->
        <button id="addCategoryBtn" class="add-category-btn">+ Add Category</button>
    </div>
    <br />

    <!-- Input field to add new category (hidden initially) -->
    <div class="new-category-input" style="display: none;">
        <input type="text" id="newCategoryName" class="new-category-name" placeholder="Enter new category name" />
        <button id="saveNewCategoryBtn" class="save-new-category-btn">Save</button>
    </div>
    <br />
    <br />

    <!-- Note Sections -->
    <div class="note-sections" id="noteSections"></div>

    <!-- Add Section Button -->
    <button id="addSectionBtn" class="add-section-btn">+</button>

    <!-- Save Button -->
    <button id="saveNoteBtn" class="save-note-btn">Save</button>
</div>

@section Scripts {
    <script>
        let sectionCount = 0;

        // Default categories
        const defaultCategories = ["School", "University", "Work", "Art Projects"];

        // Load the page
        window.addEventListener("DOMContentLoaded", function () {
            loadCategories(); // Load categories from localStorage or defaults

            // Check for a note ID in the query string
            const urlParams = new URLSearchParams(window.location.search);
            const noteId = urlParams.get("id");

            if (noteId) {
                // Load the specific note by ID
                const savedNotes = JSON.parse(localStorage.getItem("savedNotes")) || [];
                const noteToEdit = savedNotes.find((note) => note.id === noteId);

                if (noteToEdit) {
                    // Populate the form with the note data
                    populateNoteForEditing(noteToEdit);

                    // Save the edit index for saving later
                    const editNoteIndex = savedNotes.findIndex((note) => note.id === noteId);
                    localStorage.setItem("editNoteIndex", editNoteIndex);
                } else {
                    alert("Note not found!");
                    window.location.href = "/Notes/MyNotes"; // Redirect if note doesn't exist
                }
            } else {
                // Clear draft data for a new note
                localStorage.removeItem("noteHeaderDraft");
                localStorage.removeItem("noteSectionsDraft");
            }
        });

        // Load categories from localStorage or use defaults
        function loadCategories()
        {
            const defaultCategories = ["Work", "Personal", "Ideas"];
            const savedCategories = JSON.parse(localStorage.getItem("categories")) || defaultCategories;

            const categoryDropdown = document.getElementById("noteCategory");
            if (categoryDropdown) {
                categoryDropdown.innerHTML = "";

                savedCategories.forEach((category) => {
                    const option = document.createElement("option");
                    option.value = category;
                    option.textContent = category;
                    categoryDropdown.appendChild(option);
                });
            }
        }


        // Populate the categories dropdown
        function populateCategoriesDropdown(categories) {
            const categorySelect = document.getElementById("noteCategory");
            categorySelect.innerHTML = ""; // Clear existing options
            categories.forEach((category) => {
                if (typeof category === "string") {
                    const option = document.createElement("option");
                    option.value = category.toLowerCase().replace(/\s+/g, "-"); // Convert to a valid value
                    option.textContent = category;
                    categorySelect.appendChild(option);
                } else {
                    console.warn("Skipping invalid category:", category);
                }
            });
        }


        // Save the final note to localStorage
        document.getElementById("saveNoteBtn").addEventListener("click", function () {
            const noteData = collectNoteData();

            // Generate a unique ID for the note (if it's a new note)
            if (!noteData.id) {
                noteData.id = Date.now().toString(); // Use timestamp as a unique ID
            }

            // Retrieve saved notes or initialize an empty array
            const savedNotes = JSON.parse(localStorage.getItem("savedNotes")) || [];
            const editNoteIndex = localStorage.getItem("editNoteIndex");

            if (editNoteIndex) {
                // If editing, update the specific note
                savedNotes[editNoteIndex] = noteData;
                localStorage.removeItem("editNoteIndex"); // Clear the edit index after saving
            } else {
                // If creating a new note, add it to the list
                savedNotes.push(noteData);
            }

            // Save updated notes list
            localStorage.setItem("savedNotes", JSON.stringify(savedNotes));

            // Clear the draft after saving
            localStorage.removeItem("noteDraft");

            // Redirect to My Notes page
            window.location.href = "/Notes/MyNotes";
        });


        // Function to auto-save the note draft
        function setupAutoSave() {
            const noteHeader = document.getElementById("noteHeader");
            const noteCategory = document.getElementById("noteCategory");
            const noteSections = document.getElementById("noteSections");

            // Save header changes
            noteHeader.addEventListener("input", saveDraft);

            // Save category changes
            noteCategory.addEventListener("change", saveDraft);

            // Save section changes dynamically
            noteSections.addEventListener("input", saveDraft);
        }

        // Save the current note state as a draft in localStorage
        function saveDraft() {
            const noteData = collectNoteData();
            localStorage.setItem("noteDraft", JSON.stringify(noteData));
        }

        // Restore the saved note draft from localStorage
        function restoreNoteDraft(draft) {
            document.getElementById("noteHeader").value = draft.header || "";

            const noteCategory = document.getElementById("noteCategory");
            noteCategory.value = draft.category || "";

            // Restore sections
            const noteSections = document.getElementById("noteSections");
            noteSections.innerHTML = ""; // Clear existing sections
            draft.sections.forEach((section, index) => {
                const newSection = createSection(index + 1, section.title, section.text);
                noteSections.appendChild(newSection);
            });

            sectionCount = draft.sections.length;
        }

        // Collect the current note data from the form
        function collectNoteData() {
            const header = document.getElementById("noteHeader").value;
            const category = document.getElementById("noteCategory").value;
            const sections = [];

            // Collect all sections from the form
            document.querySelectorAll(".note-section").forEach((section) => {
                const title = section.querySelector(".section-title").value;
                const text = section.querySelector(".section-text").value;
                sections.push({ title, text });
            });

            return { header, category, sections };
        }

        // Populate the form when editing a note
        function populateNoteForEditing(noteToEdit) {
            document.getElementById("noteHeader").value = noteToEdit.header || "";

            const noteCategory = document.getElementById("noteCategory");
            noteCategory.value = noteToEdit.category || "";

            const noteSections = document.getElementById("noteSections");
            noteSections.innerHTML = ""; // Clear existing sections
            noteToEdit.sections.forEach((section, index) => {
                const newSection = createSection(index + 1, section.title, section.text);
                noteSections.appendChild(newSection);
            });

            sectionCount = noteToEdit.sections.length;
        }


        // Create a new section
        function createSection(number, title = "", text = "") {
            const sectionDiv = document.createElement("div");
            sectionDiv.classList.add("note-section");
            sectionDiv.id = `section${number}`;
            sectionDiv.innerHTML = `
                    <input type="text" class="section-title" placeholder="Point ${number}" value="${title}" />
                    <textarea class="section-text" placeholder="Write your text here...">${text}</textarea>
                `;
            return sectionDiv;
        }

        // Add a new section
        document.getElementById("addSectionBtn").addEventListener("click", function () {
            sectionCount++;
            const noteSections = document.getElementById("noteSections");
            const newSection = createSection(sectionCount);
            noteSections.appendChild(newSection);

            saveDraft(); // Auto-save after adding a new section
        });


        // Load categories from localStorage
        function loadCategoriesFromLocalStorage() {
            return JSON.parse(localStorage.getItem("categories")) || [];
        }

        // Save categories to localStorage
        function saveCategoriesToLocalStorage(categories) {
            localStorage.setItem("categories", JSON.stringify(categories));
        }

        
    </script>
}

<style>
    .custom-dropdown {
        position: relative;
        display: inline-block;
    }

    .dropdown-toggle {
        background-color: #8A64AD;
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

    .dropdown-menu {
        display: none;
        position: absolute;
        background-color: white;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        list-style-type: none;
        padding: 0;
        margin: 0;
        border-radius: 5px;
        z-index: 1000;
    }

    .dropdown-item {
        padding: 10px;
        color: white;
        cursor: pointer;
        border-bottom: 1px solid #f0f0f0;
    }

        .dropdown-item:last-child {
            border-bottom: none;
        }

        .dropdown-item:hover {
            opacity: 0.8;
        }

    .custom-dropdown:hover .dropdown-menu {
        display: block;
    }
    .new-note-container {
        padding: 20px;
        max-width: 600px;
        margin: 0 auto;
    }

    .note-header-input {
        width: 100%;
        padding: 10px;
        font-size: 1.5rem;
        color: #8A64AD;
        border: none;
        border-bottom: 2px solid #8A64AD;
        outline: none;
        text-align: center;
    }

    .note-header-input::placeholder {
        color: #8A64AD;
        opacity: 0.6;
    }

    .note-category {
        margin-top: 20px;
    }

    /* Custom select styling */
    .custom-select {
        position: relative;
        display: inline-block;
        width: 100%;
        background-color: #f5f5f5;
        border-radius: 5px;
        border: 1px solid #ddd;
    }

    .note-category-select {
        width: 100%;
        padding: 8px 15px;
        font-size: 1rem;
        border: none;
        border-radius: 5px;
        outline: none;
        background-color: #fff;
        color: #8A64AD;
        appearance: none; /* Removes default dropdown arrow */
        cursor: pointer;
    }

    /* Add custom arrow */
    .note-category-select::-ms-expand {
        display: none;
    }

    .note-category-select:focus {
        border-color: #8A64AD;
        box-shadow: 0 0 5px rgba(138, 100, 173, 0.5);
    }

    .note-category-select option {
        color: #333;
    }

    .add-category-btn {
        display: inline-block;
        margin-top: 10px;
        padding: 5px 10px;
        background-color: #8A64AD;
        color: white;
        font-size: 1rem;
        cursor: pointer;
        border: none;
        border-radius: 5px;
    }

    .add-section-btn {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 60px;
        height: 60px;
        background-color: #8A64AD;
        border: none;
        border-radius: 50%;
        color: white;
        font-size: 65px;
        cursor: pointer;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);
        transition: transform 0.2s ease;
        position: fixed;
        bottom: 20px;
        right: 20px;
    }

    .add-section-btn:hover {
        transform: scale(1.1);
        background-color: #764DA9;
    }

    .add-section-btn:active {
        transform: scale(0.95);
    }

    .add-section-btn i {
        pointer-events: none;
    }

    .new-category-input {
        margin-top: 10px;
    }

    .new-category-name {
        width: 100%;
        padding: 8px;
        font-size: 1rem;
        border: 1px solid #ddd;
        border-radius: 5px;
        outline: none;
    }

    .save-new-category-btn {
        display: inline-block;
        margin-top: 10px;
        padding: 5px 10px;
        background-color: #8A64AD;
        color: white;
        font-size: 1rem;
        cursor: pointer;
        border: none;
        border-radius: 5px;
    }

    .save-new-category-btn:hover {
        background-color: #764DA9;
    }

    .save-note-btn {
        display: block;
        margin: 20px auto;
        padding: 10px 20px;
        background-color: #8A64AD;
        color: white;
        border: none;
        border-radius: 5px;
        font-size: 1rem;
        cursor: pointer;
        transition: background-color 0.2s ease;
    }

    .save-note-btn:hover {
        background-color: #764DA9;
    }
</style>
