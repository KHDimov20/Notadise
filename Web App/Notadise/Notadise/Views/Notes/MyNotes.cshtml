@{
    ViewData["Title"] = "My Notes";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="main-container">

    <!-- Main Content -->
    <div class="content">
        <!-- Header Section -->
        <div class="header">
            <!-- Search Bar -->
            <div class="search-bar">
                <input type="text" id="searchBar" class="search-input" placeholder="Search notes..." />
                <i class="fas fa-search search-icon"></i>
            </div>
            <!-- Logout Button -->
            <button class="logout-btn" onclick="logout()">Log out</button>
        </div>

        <!-- Recent Notes -->
        <section class="recent-notes">
            <h1>Most Recent:</h1>
            <div class="filter-bar">
                <span class="filter-label">Filter:</span>
                <span class="filter-item">School</span>
                <span class="filter-item">Work</span>
                <span class="filter-item">University</span>
                <span class="filter-item">Art Projects</span>
            </div>
            <div class="notes-grid" id="notesGrid">
                <!-- Note cards will be dynamically populated -->
            </div>
        </section>
    </div>
</div>

@section Scripts {
    <script>
        // Global reference to the index of the note being deleted
        let noteToDeleteIndex = null;

        // Function to load saved notes
        function loadNotes() {
            const savedNotes = JSON.parse(localStorage.getItem('savedNotes')) || [];
            const notesGrid = document.getElementById('notesGrid');
            notesGrid.innerHTML = ''; // Clear previous notes

            savedNotes.forEach((note, index) => {
                const noteCard = document.createElement('div');
                noteCard.classList.add('note-card');
                noteCard.setAttribute('data-index', index);
                noteCard.innerHTML = `
                                    <h3 class="note-title">${note.header}</h3>
                                    <p class="note-text">${note.sections[0]?.text || 'No content available'}</p>
                                    <button class="delete-btn" onclick="showDeletePrompt(${index})">Delete</button>
                                `;
                noteCard.addEventListener('click', (event) => {
                    if (event.target.tagName !== 'BUTTON') editNote(index);
                });
                notesGrid.appendChild(noteCard);
            });
        }

        // Show delete prompt modal
        function showDeletePrompt(index) {
            noteToDeleteIndex = index;
            document.getElementById('deletePrompt').classList.add('show'); // Show the modal
        }

        // Confirm delete
        function confirmDelete() {
            let savedNotes = JSON.parse(localStorage.getItem('savedNotes')) || [];
            savedNotes.splice(noteToDeleteIndex, 1); // Remove the note
            localStorage.setItem('savedNotes', JSON.stringify(savedNotes)); // Save updated notes
            loadNotes(); // Reload the notes grid
            closeDeletePrompt(); // Close the modal
        }

        // Close delete prompt modal
        function closeDeletePrompt() {
            document.getElementById('deletePrompt').classList.remove('show');
        }

        // Edit Note
        function editNote(index) {
            localStorage.setItem('editNoteIndex', index); // Save index of the note to edit
            window.location.href = "/Notes/NewNote"; // Redirect to New Note page
        }

        // Log Out function
        function logout() {
            // Redirect to a logout route or clear user session
            window.location.href = '/Identity/Account/Register'; // Adjust URL to your logout endpoint
        }

        // Search Functionality
        document.getElementById('searchBar').addEventListener('input', function () {
            const query = this.value.toLowerCase();
            const noteCards = document.querySelectorAll('.note-card');

            noteCards.forEach(card => {
                const title = card.querySelector('.note-title').textContent.toLowerCase();
                card.style.display = title.includes(query) ? 'block' : 'none';
            });
        });

        // Load notes on page load
        window.addEventListener('DOMContentLoaded', loadNotes);
    </script>
}

<style>
    /* General Reset */
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: Arial, sans-serif;
    }

    body {
        display: flex;
        background-color: #f5f5f5;
        color: #333;
    }

    .main-container {
        display: flex;
        width: 100%;
        min-height: 100vh;
    }

    /* Sidebar */
    .sidebar {
        width: 240px;
        background-color: #8A64AD;
        color: #fff;
        padding: 20px;
        display: flex;
        flex-direction: column;
    }

    .bookmarks {
        list-style: none;
        margin-top: 20px;
    }

    .bookmark-link {
        text-decoration: none;
        color: #fff;
        padding: 10px 15px;
        border-radius: 8px;
        display: block;
        margin-bottom: 10px;
        background-color: #9d79bd;
    }

        .bookmark-link:hover {
            background-color: #b494d5;
        }

    /* Main Content */
    .content {
        flex: 1;
        padding: 20px;
    }

    .header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

    .search-bar {
        display: flex;
        align-items: center;
        position: relative;
    }

    .search-input {
        width: 300px;
        padding: 10px 15px;
        border-radius: 25px;
        border: 1px solid #ddd;
    }

    .search-icon {
        position: absolute;
        right: 15px;
        font-size: 1rem;
        color: #8A64AD;
    }

    .logout-btn {
        background-color: #8A64AD;
        color: white;
        border: none;
        padding: 10px 15px;
        border-radius: 5px;
        cursor: pointer;
    }

        .logout-btn:hover {
            background-color: #6b4c8e;
        }

    /* Recent Notes Section */
    .recent-notes {
        background-color: #fff;
        padding: 20px;
        border-radius: 15px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

        .recent-notes h1 {
            font-size: 1.5rem;
            color: #8A64AD;
        }

    .filter-bar {
        margin: 10px 0;
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .filter-label {
        font-weight: bold;
    }

    .filter-item {
        background-color: #e5d8f2;
        padding: 5px 10px;
        border-radius: 15px;
        font-size: 0.9rem;
        cursor: pointer;
    }

        .filter-item:hover {
            background-color: #d1bee6;
        }

    /* Notes Grid */
    .notes-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
    }

    .note-card {
        background-color: #fdfdfd;
        border: 1px solid #ddd;
        padding: 15px;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        height: 250px;
        width: 250px;
    }

        .note-card h3 {
            font-size: 1rem;
            color: #8A64AD;
        }

        .note-card p {
            font-size: 0.85rem;
            color: #555;
        }

    .delete-btn {
        background-color: #8A64AD;
        color: white;
        border: none;
        padding: 5px 10px;
        border-radius: 5px;
        font-size: 0.8rem;
        cursor: pointer;
        margin-top: a;
    }

        .delete-btn:hover {
            background-color: #8A64AD;
        }

    /* Modal styling */
    .delete-modal {
        display: none; /* Hidden by default */
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5); /* Semi-transparent background */
        z-index: 1000;
        justify-content: center;
        align-items: center;
    }

        .delete-modal.show {
            display: flex; /* Show modal when 'show' class is added */
        }

    .delete-modal-content {
        background: #fff;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        text-align: center;
        max-width: 400px;
        width: 100%;
    }

        .delete-modal-content p {
            font-size: 1.1rem;
            margin-bottom: 20px;
        }

    .modal-buttons {
        display: flex;
        justify-content: center;
        gap: 10px;
    }

    .confirm-btn {
        padding: 10px 15px;
        background-color: #8A64AD; /* Red for confirm */
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 1rem;
    }

        .confirm-btn:hover {
            background-color: #8A64AD; /* Darker red on hover */
        }

    .cancel-btn {
        padding: 10px 15px;
        background-color: #ddd; /* Gray for cancel */
        color: black;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 1rem;
    }

        .cancel-btn:hover {
            background-color: #bbb; /* Darker gray on hover */
        }
</style>
