@{
    ViewData["Title"] = "My Notes";
}

<div class="my-notes-container">
    <!-- Search Bar -->
    <div class="search-container">
        <div class="search-bar-wrapper">
            <i class="fas fa-search search-icon"></i>
            <input type="text" id="searchBar" class="search-input" placeholder="Search notes..." />
        </div>
    </div>

    <!-- Notes Grid -->
    <div class="notes-grid" id="notesGrid"></div>
</div>

@section Scripts {
    <script>
        // Load saved notes from localStorage
        function loadNotes() {
            const savedNotes = JSON.parse(localStorage.getItem('savedNotes')) || [];
            const notesGrid = document.getElementById('notesGrid');
            notesGrid.innerHTML = ''; // Clear previous notes

            savedNotes.forEach((note, index) => {
                const noteCard = document.createElement('div');
                noteCard.classList.add('note-card');
                noteCard.setAttribute('data-index', index);
                noteCard.innerHTML = `
                        <h3 class="note-title">${note.header}</h3>
                        <p class="note-text">${note.sections[0]?.text || 'No content available'}</p>
                        <button class="delete-btn" onclick="deleteNote(${index})">Delete</button>
                    `;
                noteCard.addEventListener('click', (event) => {
                    // Prevent "editNote" from triggering if the delete button is clicked
                    if (event.target.tagName !== 'BUTTON') editNote(index);
                });
                notesGrid.appendChild(noteCard);
            });
        }

        // Edit Note
        function editNote(index) {
            localStorage.setItem('editNoteIndex', index); // Save index of the note to edit
            window.location.href = "/Notes/NewNote"; // Redirect to New Note page
        }

        // Delete Note
        function deleteNote(index) {
            if (confirm("Are you sure you want to delete this note?")) {
                let savedNotes = JSON.parse(localStorage.getItem('savedNotes')) || [];
                savedNotes.splice(index, 1); // Remove the note at the specified index
                localStorage.setItem('savedNotes', JSON.stringify(savedNotes)); // Save updated notes
                loadNotes(); // Reload the notes grid
            }
        }

        // Search Functionality
        document.getElementById('searchBar').addEventListener('input', function () {
            const query = this.value.toLowerCase();
            const noteCards = document.querySelectorAll('.note-card');

            noteCards.forEach(card => {
                const title = card.querySelector('.note-title').textContent.toLowerCase();
                card.style.display = title.includes(query) ? 'block' : 'none';
            });
        });

        // Load notes on page load
        window.addEventListener('DOMContentLoaded', loadNotes);
    </script>
}

<style>
    /* Main container */
    .my-notes-container {
        padding: 20px;
        max-width: 1200px;
        margin: 0 auto;
        font-family: Arial, sans-serif;
    }

    /* Search container styling */
    .search-container {
        margin-bottom: 20px;
        text-align: center;
    }

    .search-bar-wrapper {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 80%;
        max-width: 600px;
        margin: 0 auto;
        position: relative;
    }

    .search-input {
        width: 100%;
        padding: 10px 20px 10px 40px; /* Add padding for the icon */
        font-size: 1rem;
        border: 1px solid #ddd;
        border-radius: 25px;
        outline: none;
        transition: box-shadow 0.2s ease;
    }

        .search-input:focus {
            box-shadow: 0 0 10px rgba(138, 100, 173, 0.5);
            border-color: #8A64AD;
        }

    .search-icon {
        position: absolute;
        left: 15px;
        font-size: 1.2rem;
        color: #8A64AD;
    }

    /* Notes grid styling */
    .notes-grid {
        display: grid;
        grid-template-columns: repeat(4, 200px); /* Fixed width for cards */
        gap: 20px;
        justify-content: center; /* Centers the entire grid in its container */
    }


    /* Square note card */
    /* Square note card */
    .note-card {
        background-color: #fff;
        border: 1px solid #ddd;
        border-radius: 10px;
        width: 200px;
        height: 200px;
        padding: 15px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        transition: transform 0.2s ease, box-shadow 0.2s ease;
        cursor: pointer;
        display: flex;
        flex-direction: column; /* Align content vertically */
        justify-content: flex-start; /* Align content to the top */
        align-items: center; /* Center-align text horizontally */
        gap: 10px; /* Space between the title and the text */
        overflow: hidden;
        text-align: center; /* Center-align text inside */
    }

        /* Hover effect */
        .note-card:hover {
            transform: scale(1.05);
            box-shadow: 0 6px 10px rgba(0, 0, 0, 0.15);
        }

    /* Note card content */
    .note-title {
        font-size: 1rem;
        color: #8A64AD;
        font-weight: bold;
        text-overflow: ellipsis;
        overflow: hidden;
        white-space: nowrap;
        margin: 0;
    }

    .note-text {
        font-size: 0.9rem;
        color: #666;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: normal; /* Allow text to wrap to a new row */
        margin: 0;
        display: -webkit-box;
        -webkit-line-clamp: 2; /* Show up to 2 lines of text */
        -webkit-box-orient: vertical;
    }

    /* Delete button styling */
    .delete-btn {
        margin-top: auto; /* Push the button to the bottom of the card */
        align-self: center; /* Center-align the button horizontally */
        padding: 5px 10px;
        font-size: 0.9rem;
        background-color: #8A64AD; /* Red color for delete */
        color: #fff;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.2s ease;
    }

        .delete-btn:hover {
            background-color: #764DA9; /* Darker red on hover */
        }

</style>
